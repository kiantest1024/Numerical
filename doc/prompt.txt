需要构建一个工具名字为 @numericalTools ，主要为通用的数值模拟验证工具，能够适应跟中游戏的RTP的验证需求，不管是包含jackpot还是未包含jackpot都能够进行模拟和验证，这个工具需要支持用户自定义参数，进行大规模模拟，并统计关键指标；
游戏规则配置：
基础设置：自定义可选数字范围（如1-42），选择数量（如6） 
 奖级设置：自定义奖级数量、匹配条件（如42个球中了6个为1等奖）和固定奖金 

Jackpot设置：是否启用、初始奖池、注入比例、返还比例
模拟参数设置：

模拟轮数

用户数范围（最小-最大）

投注比数范围（最小-最大）
模拟与结果分析：

随机生成游戏结果

计算普通奖金RTP

计算Jackpot奖金RTP（如启用）

统计各奖级中奖人数

可视化展示结果

核心模拟逻辑：
随机性： 游戏结果（例如42选6）需要高度随机性，确保每次模拟的公正性。
参数化： 所有可变因素（球数、选球数、奖级数量、每级赔率、Jackpot机制、RTP目标等）都应通过用户输入进行参数化。
高效计算： 模拟轮数和用户数可能很大，需要高效的计算方法来避免长时间等待。
RTP计算： 需要精确计算各种RTP（总RTP、奖池RTP等）。

前端 (UI)：
用户输入界面：清晰的表单，用于输入所有游戏参数、模拟参数（轮数、用户数范围、投注比率）。
结果展示：图表和数据表格，清晰展示模拟结果（RTP、中奖人数、奖池变化等）。
用户体验：响应式设计，友好的错误提示。
后端 (API)：
接收前端请求，处理用户输入。
执行核心模拟计算逻辑。
将计算结果返回给前端。
数据存储：如果需要保存模拟历史或预设配置，则需要数据库。

后端采用python+FAST API
数值计算库： NumPy 和 Pandas。用于高效的随机数生成、数据处理和统计计算
前端React高效构建交互式UI，Chart.js 或 Plotly.js 用于数据可视化
可docker部署

关键要求
灵活性：工具应能适应不同游戏规则，包括有Jackpot和没有Jackpot的情况

准确性：模拟算法必须准确反映游戏概率和规则
 性能：能够高效处理大规模模拟（1,000,000+轮） 
 可视化：提供直观的结果展示，包括图表和统计数据，可以一键下载对应的HTML模拟报告； 

用户体验：界面友好，配置简单明了